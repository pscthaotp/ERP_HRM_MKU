//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace ERP.Module.WebReferences.SmsGateway
{
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="appserviceSoap", Namespace="http://tempuri.org/")]
    public partial class appservice : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback requestOTPOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkOTPOperationCompleted;
        
        private System.Threading.SendOrPostCallback sendSMSOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public appservice() {
            this.Url = global::ERP.Module.Properties.Resources.url_smsgateway_appservice;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event requestOTPCompletedEventHandler requestOTPCompleted;
        
        /// <remarks/>
        public event checkOTPCompletedEventHandler checkOTPCompleted;
        
        /// <remarks/>
        public event sendSMSCompletedEventHandler sendSMSCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/requestOTP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string requestOTP(string accountId, string appId, string receiver, string confirmCode) {
            object[] results = this.Invoke("requestOTP", new object[] {
                        accountId,
                        appId,
                        receiver,
                        confirmCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void requestOTPAsync(string accountId, string appId, string receiver, string confirmCode) {
            this.requestOTPAsync(accountId, appId, receiver, confirmCode, null);
        }
        
        /// <remarks/>
        public void requestOTPAsync(string accountId, string appId, string receiver, string confirmCode, object userState) {
            if ((this.requestOTPOperationCompleted == null)) {
                this.requestOTPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrequestOTPOperationCompleted);
            }
            this.InvokeAsync("requestOTP", new object[] {
                        accountId,
                        appId,
                        receiver,
                        confirmCode}, this.requestOTPOperationCompleted, userState);
        }
        
        private void OnrequestOTPOperationCompleted(object arg) {
            if ((this.requestOTPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.requestOTPCompleted(this, new requestOTPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/checkOTP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string checkOTP(string tokenKey, string otp, string confirmCode) {
            object[] results = this.Invoke("checkOTP", new object[] {
                        tokenKey,
                        otp,
                        confirmCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void checkOTPAsync(string tokenKey, string otp, string confirmCode) {
            this.checkOTPAsync(tokenKey, otp, confirmCode, null);
        }
        
        /// <remarks/>
        public void checkOTPAsync(string tokenKey, string otp, string confirmCode, object userState) {
            if ((this.checkOTPOperationCompleted == null)) {
                this.checkOTPOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckOTPOperationCompleted);
            }
            this.InvokeAsync("checkOTP", new object[] {
                        tokenKey,
                        otp,
                        confirmCode}, this.checkOTPOperationCompleted, userState);
        }
        
        private void OncheckOTPOperationCompleted(object arg) {
            if ((this.checkOTPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkOTPCompleted(this, new checkOTPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/sendSMS", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string sendSMS(string accountId, string appId, string receivers, string content, string confirmCode) {
            object[] results = this.Invoke("sendSMS", new object[] {
                        accountId,
                        appId,
                        receivers,
                        content,
                        confirmCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void sendSMSAsync(string accountId, string appId, string receivers, string content, string confirmCode) {
            this.sendSMSAsync(accountId, appId, receivers, content, confirmCode, null);
        }
        
        /// <remarks/>
        public void sendSMSAsync(string accountId, string appId, string receivers, string content, string confirmCode, object userState) {
            if ((this.sendSMSOperationCompleted == null)) {
                this.sendSMSOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsendSMSOperationCompleted);
            }
            this.InvokeAsync("sendSMS", new object[] {
                        accountId,
                        appId,
                        receivers,
                        content,
                        confirmCode}, this.sendSMSOperationCompleted, userState);
        }
        
        private void OnsendSMSOperationCompleted(object arg) {
            if ((this.sendSMSCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.sendSMSCompleted(this, new sendSMSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void requestOTPCompletedEventHandler(object sender, requestOTPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class requestOTPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal requestOTPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void checkOTPCompletedEventHandler(object sender, checkOTPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkOTPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkOTPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    public delegate void sendSMSCompletedEventHandler(object sender, sendSMSCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.1586.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class sendSMSCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal sendSMSCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591